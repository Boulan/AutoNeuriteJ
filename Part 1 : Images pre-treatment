/* This macro helps the segmentation of neurons and nuclei images.
it asks parameter for the minimal size of a binarized neurons to remove debris.
Asks for an average nuclei diameter. The specific character in the name of Neuron and nuclei images
And the folder name were are the images.
It saves :
the original neuron images
the binarized image 
the binarized nuclei 
in a new subfolder "resultats"
*/
macro "AutoNeuriteJ Part1  [F1]" {
//////////////////////// Parameters////////////////////////////////
Taille=1;                   // Scalling factor to reduce image size before processing 
minNeuron_part1=10;			// Minimal neuron area in order to exclude debris
NucleusDiameter=20;			// Diameter of nuclei
minNeuriticTree=50;         // Defines the minimal length to be a primary neurite tree if smaller it is erased from the skeleton
minNeuron_part2=100;        // Defines the minimal area in the binary image to be a neuron if less the neuron is not considered
minLengthSkelet=50;         // Defines the minimal length of a neuritic skeleton if smaller the neuron is not considered
minAxon=150; 				// Minimal length to be an axon (pixels)
minNeurite=10; 				// Minimal length to be a neurite (pixels)
ratio=2; 					// Minimal ratio between (mean primary neurite length) and (axonal length)--> Minimal ratio to be an axon

/////////////////////////////pic up the previewsly used settings///////////////////////////
ParameterFile=getDirectory("temp"); 

filesaver=File.exists(ParameterFile+"/AutoneuriteJ_settings.txt");
if (filesaver==1){
	
	filestring=File.openAsString(ParameterFile+"/AutoneuriteJ_settings.txt");
	rows=split(filestring, "\n");
	settings=newArray(rows.length);
		
	for(i=0; i<rows.length; i++){                 ///////////transform text from txt files into integers
		columns=split(rows[i],"\t");
		settings[i]=parseInt(columns[0]);
	}
	Taille=settings[0];
	minNeuron_part1=settings[1];
	NucleusDiameter=settings[2];
	minNeuriticTree=settings[3]; 
	minNeuron_part2=settings[4];  
	minLengthSkelet=settings[5];
	minAxon=settings[6];				
	minNeurite=settings[7]; 				
	ratio=settings[8];
}

minDoG=1;
maxDoG=100;

Dialog.create("File names and parameter settings");
Dialog.addString("Neuron image name ? (Correponding image file name must contain the term entered)","Cy3");
Dialog.addNumber("Minimal size for a neuron ?",minNeuron_part1);
Dialog.addString("Nuclei image name ? (Correponding image file name must contain the term entered)","DAPI");
Dialog.addNumber("Nucleus diameter (in pixels)",NucleusDiameter);
Dialog.addNumber("Scale factor \n (Will divide the size of the image by the value)",Taille);
Dialog.show();

tubName=Dialog.getString();
neuronSize=Dialog.getNumber();
nucleiName=Dialog.getString();
NucleusDiameter=Dialog.getNumber();
Taille=Dialog.getNumber();
////////////////////////////////////////////Save the new parameters used/////////////////////////
filesaver=File.exists(ParameterFile+"/AutoneuriteJ_settings.txt");
if (filesaver==1){
	File.delete(ParameterFile+"/AutoneuriteJ_settings");
}
		////Part1settings////
	print(Taille); /// (1)
	print(minNeuron_part1); /// (2)
	print(NucleusDiameter); ///(3)
	////Part2_settings////
	print(minNeuriticTree); // (4) 
	print(minNeuron_part2);  // (5)
	print(minLengthSkelet); // (6) 
	////Part3 settings////
	print(minAxon); 	///(7)			
	print(minNeurite); 	///(8)			
	print(ratio); 		///(9)	
	
	selectWindow("Log"); saveAs("Text",ParameterFile+"/AutoneuriteJ_settings"); run("Close");
////////////////////////////////////////////////////////////////////////////////////////////////////////////

NucleusSurface=NucleusDiameter/2*NucleusDiameter/2*PI;
minNucleusSurface=NucleusSurface/3;
maxNucleusSurface=NucleusSurface*3;

rep=getDirectory("Image Folder ?");
nomrep=File.getName(rep);
liste=getFileList(rep);
File.makeDirectory(rep+"\\resultats_"+nomrep+"\\");
newRep=rep+"\\resultats_"+nomrep+"\\";



for (i=0;i<liste.length;i++) 
	{

	if (indexOf(liste[i], nucleiName)!=-1)
		{
  			open(rep+liste[i]);

run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
title=getTitle();

getDimensions(width, height, channels, slices, frames);
xsize=width*Taille;
ysize=height*Taille; 


filter (title, "Gaussian Blur", "Gaussian Blur", NucleusDiameter/4, NucleusDiameter*4);  

setAutoThreshold("Default dark");


waitForUser("Set the threshold for nuclei : \n You may do nothing !!!\n Zoom in to see better !!!");

setOption("BlackBackground", true);
run("Convert to Mask");
run("Watershed");
run("Analyze Particles...", "size=&minNucleusSurface-&maxNucleusSurface circularity=0.5-1.00 show=Masks exclude in_situ");
title=File.nameWithoutExtension;
run("Scale...", "x=Taille y=Taille width="+xsize+" height="+ysize+"  interpolation=Bilinear create");
			run("Multiply...", "value=2500.000");
saveAs("tiff",newRep+"Nucleus_Bin_"+title); close();close();

}

if (indexOf(liste[i], tubName)!=-1)
		{
  			open(rep+liste[i]);
run("Set Scale...", "distance=0 known=0 pixel=1 unit=pixel");
title=File.nameWithoutExtension;
getDimensions(width, height, channels, slices, frames);
xsize=width*Taille;
ysize=height*Taille; 

		run("Scale...", "x=Taille y=Taille width="+xsize+" height="+ysize+"  interpolation=Bilinear create");
saveAs("tiff",newRep+"Neuron_"+title);
			close();
title=getTitle();
 
filter (title,"Median","Gaussian Blur",minDoG,maxDoG);

setAutoThreshold("Triangle dark");


waitForUser("Set the threshold for Neurons");
setOption("BlackBackground", true);
run("Convert to Mask");
run("Analyze Particles...", "size=&minNeuron_part1-100000 circularity=0-0.5 show=Masks exclude in_situ");
title=File.nameWithoutExtension;
getDimensions(width, height, channels, slices, frames);
xsize=width*Taille;
ysize=height*Taille; 
			run("Scale...", "x=Taille y=Taille width="+xsize+" height="+ysize+"  interpolation=Bilinear create");
			run("Multiply...", "value=2500.000");

saveAs("tiff",newRep+"NeuronBin_"+title); close(); close();

}
} /// End of liste length
print("Scale =" + Taille);
print("Minimal size for a neuron : "  +neuronSize+ "   Minimal size for nucleus :" +minNucleusSurface+ "   Maximal size for nucleus:" +maxNucleusSurface+ "");			
print("Filter size for neuron segmentation  : "+minDoG+" and "+maxDoG);
selectWindow("Log"); saveAs("Text",newRep+"Parameter_"+title); run("Close");	
} /// End of macro
//////////////////// Functions//////////////////////////////////////////////////////////////////////////////
function filter (image,filter1,filter2,size1,size2) {

selectWindow(image);

run("Duplicate...", "title=1");
run("Duplicate...", "title=2"); 
if (filter1=="Median"){
selectWindow("1");run(filter1+"...","radius="+size1);}
if (filter1=="Gaussian Blur"){
selectWindow("1");run(filter1+"...","sigma="+size1);} 

if (filter2=="Median"){
selectWindow("2");run(filter2+"...","radius="+size2);}
if (filter2=="Gaussian Blur"){
selectWindow("2");run(filter2+"...","sigma="+size2);} 

imageCalculator("Subtract","1","2");
selectWindow("2"); close();
selectWindow(image);close();
selectWindow("1"); rename (image);
}
